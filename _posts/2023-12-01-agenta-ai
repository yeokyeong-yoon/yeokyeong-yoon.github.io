---
layout: post
title: "프롬프트 엔지니어링 플랫폼 구축기: Agenta AI 오픈소스 기여 경험"
date: 2023-12-01
categories: [개발, 오픈소스, LLM]
tags: [프롬프트 엔지니어링, Agenta AI, 오픈소스, LLM, FastAPI]
---

# 프롬프트 엔지니어링 플랫폼 구축기: Agenta AI 오픈소스 기여 경험

LLM 프로젝트 TF에서 짧게 일을 했었는데, 그때 맡은 업무가 프롬프트 엔지니어링 플랫폼을 만드는 것이었다. 그동안 LLM 서비스를 요긴하게 쓰기만 했지, 프롬프트가 왜 중요한지 깊이 이해하지 못했다. 솔직히 말하면 "프롬프트 엔지니어링"이라는 것이 소프트웨어 개발자의 필수 역량인 코딩 스킬을 "입코딩"으로 대체한다는 놀리는 말인줄 알았던 나였다. 이 분야에 무지했던 내가 어떻게 이 프로젝트에 참여하게 되었는지, 프롬프트 엔지니어링 플랫폼을 만들다가 어떻게 Agenta AI라는 오픈소스 프로젝트에 기여하게 되었는지, 그리고 이 과정에서 무엇을 배웠는지 나눠보려고 한다.

## 프롬프트 관리의 어려움과 도전

당시 TF를 만들었던 팀은 리뷰 요약 서비스를 개발하면서 LLM을 활용한 프롬프트 개발에 많은 시간을 쏟았다. 하지만 여러 어려움에 부딪혔다. 프롬프트 버전 관리는 파일명에 v1, v2만 붙이는 수준이었고, 여러 프롬프트 성능을 비교하려면 수작업으로 테스트해야 했다. 특히 팀원 간 좋은 프롬프트를 공유하는 체계적인 방법이 없어서 스크린샷, 화면 공유 혹은 csv파일로 변경 등 수동적으로 해결해야 하는 업무가 있었다. 또한 프롬프트 변경 시 정말 개선되었는지, 기대한 만큼의 효과가 있는지 판단할 객관적인 기준도 부재했다.

LLM 프로젝트 경험이 없었지만, 문제점을 파악하기 위해 나도 간단하게 OpenAI API를 통해서 대화 데이터를 여러개 뽑아보았다. 평소에는 아무 생각 없이 ChatGPT 같은 LLM의 답변에 감사하며 사용했지만, 업무에 필요한 데이터를 추출하려고 하니 상황이 달랐다. LLM이 instruction을 잘 따르지 않거나, instruction을 잘 따르면 내용이 별로거나, 내용이 괜찮으면 포맷이 잘못되는 등의 문제가 발생했다. 완벽한 답변을 얻기 위해 여러번 프롬프트를 수정하고 제공해야 했는데, 마치 두더지 잡기 같은 느낌이 들었다.

이런 문제들로 인해 효율적인 프롬프트 개발이 어려웠고, 더 나은 방법이 필요하다고 판단하여 "프롬프트 엔지니어링 플랫폼"의 필요성이 대두되었다. 핵심적으로 프롬프트를 체계적으로 저장하고 버전 관리할 수 있는 시스템, 프롬프트에 조금씩 변형을 주고 이를 버전으로 관리할 수 있는 도구, 객관적인 성능 평가 방법, 그리고 팀원 간 의견을 공유할 수 있는 플랫폼이 필요했다.

처음에는 우리가 필요한 기능을 구현하기 위해 Product design document를 작성하면서 요구사항과 필요한 기능들을 정리하고, 우선순위를 정했다. 모든 프로젝트의 기획 단계가 그렇듯, 브레인 스토밍을 하다보니 필요한 기능이 정말 많아졌다. 빠르게 구현하기로 했던 프로젝트의 덩치가 커지면서, 레퍼런스 겸으로 찾던 오픈소스 솔루션들을 오히려 본진으로 삼아 활용하는 것이 더 효율적이라 판단하게 되었다. 이에 따라 다양한 도구를 검토하기 시작했다.

## Agenta AI와의 만남과 협업 과정

여러 오픈소스 프롬프트 엔지니어링 도구를 살펴보던 중, Agenta AI라는 프로젝트를 발견했다. 이 프로젝트는 우리가 원하는 기본적인 기능(프롬프트 저장, 버전 관리, 간단한 평가)을 제공했지만, 아직 초기 단계였고 몇 가지 우리가 원하는 핵심 기능이 부족했다. 하지만 초기 단계라는 점이 오히려 장점이었다. 우리가 필요한 기능을 직접 구현하고 오픈소스에 기여한다면, 우리가 엔지니어로서 성장할 수 있는 동시에 오픈소스 컨트리뷰션이라는 기회도 얻을 수 있는 좋은 기회였기 때문이다.

당시 우리 말고도 Agenta AI에 기여하는 개인들이 있었는데, 이들은 슬랙에서 커뮤니케이션하며 Agenta AI의 버그를 고치거나 간단한 개발을 하고 있었다. Agenta AI 측에서 기여자들에게 적극적으로 응답하는 모습을 보고, 우리도 직접 연락하여 우리의 목적과 요구사항을 공유했다. 그들은 우리의 아이디어와 참여에 매우 긍정적인 반응을 보였고, 이후 3번 정도의 화상 회의를 통해 약 두 달 동안 긴밀하게 협력했다. 이 과정에서 나는 회의를 진행하는 좋은 기회도 얻을 수 있었다.

내가 오픈소스에 기여한 것 중 가장 중요한 것은 Variant 매개변수 검색용 API 엔드포인트 개발이었다. 이전에는 특정 앱의 프롬프트 설정(Variant)에 쉽게 접근할 수 있는 방법이 없었는데, `app_name`과 `variant_name`으로 원하는 설정을 쉽게 검색할 수 있는 API를 만들었다. 기술적으로는 FastAPI 프레임워크를 사용하여 RESTful API 엔드포인트를 구현했고, MongoDB 쿼리를 최적화하여 빠른 검색이 가능하도록 했다. 이 기능은 GitHub Pull Request #583을 통해 메인 브랜치에 성공적으로 병합되었다.

또한 프롬프트 저장, 식별, 버전 관리 기능 강화와 변경 이력 추적 및 롤백 기능도 제안했다. 그리고 다양한 평가 방법(one-hot 인코딩 방식의 카테고리 평가, 여러 평가자의 투표 기반 평가, 텍스트 유사도 측정)을 도입하고 평가 결과를 저장하고 공유하는 방법에 대해서도 논의했다. 특히 한국어 지원도 필요했기 때문에, custom logic을 추가하여 한국어 프롬프트를 위해 python/js 형태로 평가 로직을 지원하는 기능도 추가할 계획까지 세웠다.

협업은 순조롭게 진행되는 듯했으나, 우리의 EKS 개발 환경에 배포하는 과정에서 문제가 발생했다. Agenta AI의 도커 기반 배포 방식이 우리 환경에는 너무 복잡했던 것이다. Agenta AI는 모든 백엔드 코드가 도커 컨테이너로 패키징되어 있었고, 새로운 앱이나 기능을 추가할 때마다 새로운 도커 이미지를 빌드하는 방식이었다. 우리의 EKS(Amazon Elastic Kubernetes Service) 환경에서는 이런 방식이 잘 맞지 않았는데, 특히 보안 정책과 네트워크 구성 때문에 많은 부분을 수정해야 했다.

가장 큰 문제는 Agenta AI가 각 프롬프트 앱을 위해 별도의 컨테이너를 동적으로 생성하는 구조였다는 점이다. 우리 쿠버네티스 환경에서는 이렇게 동적으로 컨테이너를 생성하고 관리하는 것이 권한 문제로 쉽지 않았다. 기술적으로 설명하자면, Agenta AI는 Docker-in-Docker(DinD) 방식을 사용하여 컨테이너 내에서 다른 컨테이너를 실행하는 구조였는데, 이는 쿠버네티스의 보안 컨텍스트 제약과 충돌했다. 또한 내부 서비스와의 통합을 위해 네트워크 정책도 많이 수정해야 했다. 

이런 기술적 문제들을 해결하기에는 코드 수정사항이 많은 것 같아서 Agenta AI 팀과 공유했더니, 그들은 우리를 기여자가 아닌 기업 고객으로 영입하고 싶어했다. 마침 회사 내에서 다른 프로젝트의 우선순위가 높아지고 겸직하는 일도 조금 벅차서 결국 LLM 프로젝트 TF도 마무리하게 되었다.

그래도 짧은 기간이었지만, 저 먼 국가의 개발자들과 함께 코드 리뷰를 진행하며 오픈소스 협업 경험을 쌓은 것은 소중한 경험이었다. 서로 다른 배경과 경험을 가진 개발자들이 같은 목적으로 자발적으로 모여 하나의 솔루션을 개선시키려고 하는 모습이 신기했다. 오픈소스 기여자가 되려면 특정 언어나 도메인의 전문가 쯤은 되어야 할 수 있지 않을까 생각했는데, 이렇게 다른 제품에 내 이름을 한번 올리니 기분도 좋고 앞으로도 다양한 프로젝트에 적극적으로 기여자로 참여하고 싶다는 생각이 들었다.

## 성과와 배움

결과적으로는 프롬프트 엔지니어링 플랫폼을 완성하지는 못했지만, 이 과정을 통해 프롬프트 엔지니어링과 실험 과정을 깊이 이해할 수 있게 되었다. 왜 프롬프트 엔지니어링이 필요한지, 왜 이것을 엔지니어링이라고 부르는지 명확히 알게 되었다. 단순히 텍스트를 작성하는 것이 아니라, 체계적인 접근과 반복적인 실험, 그리고 객관적인 평가가 필요한 진정한 엔지니어링 과정이었기 때문이다. 또한 회사에서 다른 "플랫폼"을 운영하는 사람으로서, 새로운 목적의 플랫폼을 처음부터 기획하는 과정이 매우 흥미로웠다.

문제를 인식하고 요구사항을 도출하는 과정(체계적인 버전 관리로 프롬프트 변경 사항을 추적하고 이전 버전으로 쉽게 돌아갈 수 있게 하기, 팀원 간 프롬프트 공유 방식, 평가 방식 등), 그리고 구현 방법에 대해 논의하는 것 모두 새롭지만 즐거운 경험이었다. 이 과정에서 프롬프트 엔지니어링이 단순히 텍스트를 작성하는 작업이 아닌, 체계적인 개발과 평가가 필요한 진정한 '엔지니어링' 분야임을 깨달았다.

특히 자연어의 모호성, 평가의 어려움, 비용과 시간 문제 등 여러 도전 과제가 있다는 것을 배웠다. 똑같은 의미라도 표현 방식에 따라 AI가 다르게 해석할 수 있고, 같은 프롬프트로 여러 번 질문해도 다른 답변이 나올 수 있다는 점이 흥미로웠다. 또한 "이 프롬프트가 더 좋다"를 객관적으로 증명하기 어렵고, 평가용 테스트 데이터를 만드는 것도 상당한 노력이 필요한 작업이다. 프롬프트가 길어질수록 API 호출 비용이 늘어나고, AI 응답 생성 시간이 길어지면 사용자 경험이 나빠진다는 현실적인 제약도 고려해야 했다.

## 오픈소스 기여의 가치

오픈소스 프로젝트에 기여하면서 협업의 중요성을 깊이 배웠다. 다양한 배경을 가진 개발자들과 함께 일하며 새로운 관점을 얻었고, 코드 리뷰 과정에서 더 나은 코드 작성법을 배울 수 있었다.

내가 겪은 문제와 해결책이 다른 사람에게도 도움이 될 수 있다는 것을 깨달았고, 모두가 함께 성장하는 오픈소스 문화의 가치를 직접 경험했다. 또한 완벽한 솔루션보다 현실적인 문제 해결이 더 중요하며, 작은 기여라도 꾸준히 하는 것이 프로젝트 발전에 큰 도움이 된다는 사실을 배웠다.

## 마치며

Agenta AI 오픈소스 프로젝트 참여는 프롬프트 엔지니어링의 체계화뿐만 아니라 오픈소스 커뮤니티에 기여하는 값진 경험이었다. 이 경험을 통해 프롬프트 엔지니어링의 본질과 오픈소스 협업의 가치를 깊이 이해하게 되었다.

앞으로도 이러한 경험을 바탕으로 새로운 기술 분야에서 좀 더 무모하게(?) 도전해 보고 싶다. 특히 내가 플랫폼 운영을 해서 그런지, 내가 기술적으로 기여한 엔지니어링 플랫폼이 다른 회사들에게도 좋은 참고 사례가 되었으면 하는 그런 기대감도 품었던 시간이었다.