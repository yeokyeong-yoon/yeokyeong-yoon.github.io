import { z, Genkit } from 'genkit';
import { ModelReference, ModelAction } from 'genkit/model';
import { GoogleAuth } from 'google-auth-library';
import { P as PluginOptions } from './types-BUll8PzL.js';
import '@google-cloud/vertexai';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare const imagen2: ModelReference<z.ZodObject<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, z.ZodTypeAny, "passthrough">>>;
declare const imagen3: ModelReference<z.ZodObject<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, z.ZodTypeAny, "passthrough">>>;
declare const imagen3Fast: ModelReference<z.ZodObject<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
    version: z.ZodOptional<z.ZodString>;
    temperature: z.ZodOptional<z.ZodNumber>;
    maxOutputTokens: z.ZodOptional<z.ZodNumber>;
    topK: z.ZodOptional<z.ZodNumber>;
    topP: z.ZodOptional<z.ZodNumber>;
    stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, {
    /** Language of the prompt text. */
    language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
    /** Desired aspect ratio of output image. */
    aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
    /**
     * A negative prompt to help generate the images. For example: "animals"
     * (removes animals), "blurry" (makes the image clearer), "text" (removes
     * text), or "cropped" (removes cropped images).
     **/
    negativePrompt: z.ZodOptional<z.ZodString>;
    /**
     * Any non-negative integer you provide to make output images deterministic.
     * Providing the same seed number always results in the same output images.
     * Accepted integer values: 1 - 2147483647.
     **/
    seed: z.ZodOptional<z.ZodNumber>;
    /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
    location: z.ZodOptional<z.ZodString>;
    /** Allow generation of people by the model. */
    personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
    /** Adds a filter level to safety filtering. */
    safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
    /** Add an invisible watermark to the generated images. */
    addWatermark: z.ZodOptional<z.ZodBoolean>;
    /** Cloud Storage URI to store the generated images. **/
    storageUri: z.ZodOptional<z.ZodString>;
    /** Mode must be set for upscaling requests. */
    mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
    /**
     * Describes the editing intention for the request.
     *
     * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
     */
    editConfig: z.ZodOptional<z.ZodObject<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
        /** Describes the editing intention for the request. */
        editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
        /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
        maskMode: z.ZodOptional<z.ZodObject<{
            maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
            classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }, {
            maskType: "background" | "foreground" | "semantic";
            classes?: number[] | undefined;
        }>>;
        maskDilation: z.ZodOptional<z.ZodNumber>;
        guidanceScale: z.ZodOptional<z.ZodNumber>;
        productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
    }, z.ZodTypeAny, "passthrough">>>;
    /** Upscale config object. */
    upscaleConfig: z.ZodOptional<z.ZodObject<{
        upscaleFactor: z.ZodEnum<["x2", "x4"]>;
    }, "strip", z.ZodTypeAny, {
        upscaleFactor: "x2" | "x4";
    }, {
        upscaleFactor: "x2" | "x4";
    }>>;
}>, z.ZodTypeAny, "passthrough">>>;
declare const SUPPORTED_IMAGEN_MODELS: {
    imagen2: ModelReference<z.ZodObject<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, z.ZodTypeAny, "passthrough">>>;
    imagen3: ModelReference<z.ZodObject<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, z.ZodTypeAny, "passthrough">>>;
    'imagen3-fast': ModelReference<z.ZodObject<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, "passthrough", z.ZodTypeAny, z.objectOutputType<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, z.ZodTypeAny, "passthrough">, z.objectInputType<z.objectUtil.extendShape<{
        version: z.ZodOptional<z.ZodString>;
        temperature: z.ZodOptional<z.ZodNumber>;
        maxOutputTokens: z.ZodOptional<z.ZodNumber>;
        topK: z.ZodOptional<z.ZodNumber>;
        topP: z.ZodOptional<z.ZodNumber>;
        stopSequences: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, {
        /** Language of the prompt text. */
        language: z.ZodOptional<z.ZodEnum<["auto", "en", "es", "hi", "ja", "ko", "pt", "zh-TW", "zh", "zh-CN"]>>;
        /** Desired aspect ratio of output image. */
        aspectRatio: z.ZodOptional<z.ZodEnum<["1:1", "9:16", "16:9", "3:4", "4:3"]>>;
        /**
         * A negative prompt to help generate the images. For example: "animals"
         * (removes animals), "blurry" (makes the image clearer), "text" (removes
         * text), or "cropped" (removes cropped images).
         **/
        negativePrompt: z.ZodOptional<z.ZodString>;
        /**
         * Any non-negative integer you provide to make output images deterministic.
         * Providing the same seed number always results in the same output images.
         * Accepted integer values: 1 - 2147483647.
         **/
        seed: z.ZodOptional<z.ZodNumber>;
        /** Your GCP project's region. e.g.) us-central1, europe-west2, etc. **/
        location: z.ZodOptional<z.ZodString>;
        /** Allow generation of people by the model. */
        personGeneration: z.ZodOptional<z.ZodEnum<["dont_allow", "allow_adult", "allow_all"]>>;
        /** Adds a filter level to safety filtering. */
        safetySetting: z.ZodOptional<z.ZodEnum<["block_most", "block_some", "block_few", "block_fewest"]>>;
        /** Add an invisible watermark to the generated images. */
        addWatermark: z.ZodOptional<z.ZodBoolean>;
        /** Cloud Storage URI to store the generated images. **/
        storageUri: z.ZodOptional<z.ZodString>;
        /** Mode must be set for upscaling requests. */
        mode: z.ZodOptional<z.ZodEnum<["upscale"]>>;
        /**
         * Describes the editing intention for the request.
         *
         * Refer to https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api#edit_images_2 for details.
         */
        editConfig: z.ZodOptional<z.ZodObject<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, "passthrough", z.ZodTypeAny, z.objectOutputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">, z.objectInputType<{
            /** Describes the editing intention for the request. */
            editMode: z.ZodOptional<z.ZodEnum<["inpainting-insert", "inpainting-remove", "outpainting", "product-image"]>>;
            /** Prompts the model to generate a mask instead of you needing to provide one. Consequently, when you provide this parameter you can omit a mask object. */
            maskMode: z.ZodOptional<z.ZodObject<{
                maskType: z.ZodEnum<["background", "foreground", "semantic"]>;
                classes: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
            }, "strip", z.ZodTypeAny, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }, {
                maskType: "background" | "foreground" | "semantic";
                classes?: number[] | undefined;
            }>>;
            maskDilation: z.ZodOptional<z.ZodNumber>;
            guidanceScale: z.ZodOptional<z.ZodNumber>;
            productPosition: z.ZodOptional<z.ZodEnum<["reposition", "fixed"]>>;
        }, z.ZodTypeAny, "passthrough">>>;
        /** Upscale config object. */
        upscaleConfig: z.ZodOptional<z.ZodObject<{
            upscaleFactor: z.ZodEnum<["x2", "x4"]>;
        }, "strip", z.ZodTypeAny, {
            upscaleFactor: "x2" | "x4";
        }, {
            upscaleFactor: "x2" | "x4";
        }>>;
    }>, z.ZodTypeAny, "passthrough">>>;
};
declare function imagenModel(ai: Genkit, name: string, client: GoogleAuth, options: PluginOptions): ModelAction;

export { SUPPORTED_IMAGEN_MODELS, imagen2, imagen3, imagen3Fast, imagenModel };
